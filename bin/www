#!/usr/bin/env node

var app = require('../app');
var debug = require('debug')('myapp2:server');
var http = require('http');

var defaultConfig = {
    env: 'dev',
    port: 3000
};

// Get the config from file or fallback to the default
var config;
try {
    config = require('../../webappTemplateConfig');
} catch(e1) {
    try {
        config = require('../config');
    } catch(e2) {
        config = defaultConfig;
    }
}

// Set the port from the config
var port = normalizePort(config.port);
app.set('port', port);

// Set the environment from the config
var env = normalizeEnv(config.env);
app.set('env', env);

// Create HTTP server.
var server = http.createServer(app);

// Listen on provided port, on all network interfaces.
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Normalize the environment variable into either 'dev' or 'prod'.
 */
function normalizeEnv(val) {
    var env = val || 'dev';

    if (env !== 'dev' && env !== 'prod') {
        env = 'dev';
    }
    return env;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch(error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
